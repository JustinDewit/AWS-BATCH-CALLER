import argparse
import json
import os
import re

from langchain_openai import OpenAI

MODEL_NAME = "gpt-3.5-turbo-instruct"


def initialize_model():
    """
    Initializes an instance of the OpenAI model.
    """
    return OpenAI(model=MODEL_NAME)


def send_prompt(llm, prompt):
    """
    Sends a prompt to the language model and returns the response.
    """
    try:
        llm_response = llm.invoke(prompt)
        return llm_response
    except Exception as e:
        print("An error occurred:", e)
        return None


def generate_regex(llm, included_words=None, excluded_words=None):
    """
    Generates a regular expression based on the provided URL rules.
    This function creates a prompt for the language model to construct a regex pattern suitable for a web scraper, and then checks the validity of the generated regex in Python.
    """

    if included_words and any(included_words) and excluded_words and any(excluded_words):
        prompt = f"Please provide a regular expression that compiles in Go and is designed for a web scraper, making it case-insensitive and tailored for URL matching. It should include the words in the following list: {included_words}, and specifically exclude the words in the following list: {excluded_words}"
        print("include exclude prompt used")
    elif included_words and any(included_words):
        prompt = f"Please provide a regular expression that compiles in Go and is designed for a web scraper, making it case-insensitive and tailored for URL matching, adhering to the following rules: {included_words}"
        print("include prompt used")
    elif excluded_words and any(excluded_words):
        prompt = f"Please provide a regular expression that compiles in Go and is designed for a web scraper, making it case-insensitive and tailored for URL matching, and specifically excludes the words in the following rules: {excluded_words}"
        print("exclude prompt used")
    else:
        raise ValueError("At least one of 'included_words' or 'excluded_words' must be provided.")

    try:
        llm_response = send_prompt(llm, prompt)

        # Validate the regex pattern in Python.
        if check_regex_validity(llm_response):
            print("Valid regex pattern.")
        else:
            print("Invalid regex pattern.")

        return llm_response
    except Exception as b:
        print("An error occurred:", b)
        return None


def check_regex_validity(llm_response: str) -> bool:
    """
    Checks if the regex pattern generated by the language model is valid in Python.
    Note: This check is specific to Python's regex engine and may not guarantee compatibility with Go's regex engine.
    """
    try:
        re.compile(llm_response)
        return True
    except re.error:
        return False


def main():
    # Check if the function is running in AWS Lambda
    if "AWS_EXECUTION_ENV" in os.environ:
        # If running in AWS Lambda, get 'included_words' and 'excluded_words' from the event object
        included_words = event.get("included_words")  # noqa: F821 # TODO: fix this
        excluded_words = event.get("excluded_words")  # noqa: F821 # TODO: fix this
    else:
        # If running locally, set up command-line argument parsing
        parser = argparse.ArgumentParser()
        # Add 'event' as a command-line argument
        parser.add_argument("event", help="The event data in JSON format")
        # Parse the command-line arguments
        args = parser.parse_args()
        # Parse the 'event' argument into a Python dictionary
        event = json.loads(args.event)
        # Get 'included_words' and 'excluded_words' from the event object
        included_words = event.get("included_words")
        excluded_words = event.get("excluded_words")

    # If no 'included_words' or 'excluded_words' was provided, print a message and return early
    if not included_words and not excluded_words:
        print("No included or excluded words provided.")
        return

    # Initialize the language model
    llm = initialize_model()
    # Generate a regex based on the included and excluded words
    response = generate_regex(llm, included_words, excluded_words)
    # Print the generated regex
    print("Function response:", response)


if __name__ == "__main__":
    main()